--------------------------------------------------------------------------------
List three things from the syllabus that you think will help you learn this semester
--------------------------------------------------------------------------------
1: Course schedule. I appreciate how structured this course is, as it allows me to work ahead
and better accommodate for my personal schedule and other obligations. I've found that I tend
to learn and perform best in highly structured classes like this.

2: Absence forms. Being able to fill out a simple Google form makes letting Prof. Bang know
about absences easier and less intimidating than sending an email or personally informing the
instructor, and I definitely prefer this system to the latter.

3: Grade estimator. I appreciate knowing exactly how many points every individual assignment will
be worth, as this will allow for more strategic prioritization of tasks once the semester gets
busier and be more confident in my current progress than a traditional syllabus with only category
breakdowns.

--------------------------------------------------------------------------------
After reading the syllabus, what questions do you have?
--------------------------------------------------------------------------------
How long should each module and homework assignment take? Is there a set length for each, or will
it vary based on the week's content?

What specifically will the final project involve? Will we be able to work on this project in groups?

--------------------------------------------------------------------------------
Yang and Rabkin response (see assignment)
--------------------------------------------------------------------------------
"Programmers constrained on time or money will tend not choose [Haskell and Idris] first. Knowledge of such languages 
is often limited to the programmers who learned them in school (often elite institutions or in graduate school) 
or have sufficient leisure time–and access to a community–for self-teaching."

This quote stood out to me as an effective rebuttal of the claim that, simply because a person can self-teach themselves
how to code for free using Internet resources, computer science is an equitable and meritocratic field. Even if resources
are free, only those with sufficient free time (which is itself a privilege often denied those working lower paid jobs) will
be able to utilize those resources and, in this case, self-teach the skills necessary to obtain a programming job. Inequities
in free time are a major driver of social stratification - how can a single parent working two jobs be expected to find the time
to finish a 50 hour Python course? - and, unfortunately, make it difficult for less fortunate individuals to pursue a career
in programming. Until we find a way to overcome this barrier and provide all people the opportunity and time to learn how to code,
it will be impossible to provide equitable entrance into the field of programming.

--------------------------------------------------------------------------------
Hopper response (see assignment)
--------------------------------------------------------------------------------
Hopper's tenacity, despite constant disbelief from her superiors, stood out to me, and was likely the primary driver behind her
continued successes in developing the first programming languages. Her story is an important lesson that, if you know your field
and have evidence to support your ideas, you often need to ignore less qualified advice in order to make great discoveries. Relatedly,
Hopper also showcased the importance of drawings on the findings of other experts in your field (rather than viewing them as rivals); many
of Hopper's team's findings were inspired by or based on the approaches taken in other research papers, and highlight the collaborative nature
of any major scientific undertaking.

--------------------------------------------------------------------------------
Describe a spoken language (see assignment).
Which language did you get?
--------------------------------------------------------------------------------
I rolled Marathi.

What is the character set of that language?
--------------------------------------------------------------------------------
Marathi has a character set of 34 consonants, 12 vowels, and 14 vowel modifiers (which change the pronunciation of any modified
vowels).

--------------------------------------------------------------------------------
Describe a programming language (see assignment).
Which programming language did you get?
--------------------------------------------------------------------------------
I rolled JavaScript.

--------------------------------------------------------------------------------
What is the character set of that programming language?
--------------------------------------------------------------------------------
JavaScript utilizes the Unicode character set which, in turn, consists of the 26 letters of the English language,
the 10 Arabic numerals, and several additional operators (hash, ampersand, plus, etc.).

--------------------------------------------------------------------------------
What are the keywords in that programming language?
--------------------------------------------------------------------------------
As per W3schools.com's article "JavaScript Reserved Words," JavaScript's keywords are abstract, arguments, await, boolean,
break, byte, case, catch, char, class, const, continue, debugger, default, delete, do, double, else, enum, eval, export,
extends, false, final, finally, float, for, function, goto, if, implements, import, in, instanceof, int, interface, let,
long, native, new, null, package, private, protected, public, return, short, static, super, switch, synchronized, this, throw,
throws, transient, true, try, typeof, var, void, volatile, while, with, and yield.

--------------------------------------------------------------------------------
What does the spoken language have in common with the programming language? 
--------------------------------------------------------------------------------
Both languages taken characters from their character sets - each of which is distinct from all other members of the set - and
string them together to create words. Many of these words (but, importantly, not all possible words that could be created) are
imbued with meaning by the language. Both languages are also used for purposes of communication: Marathi is used to communicate
ideas between people who speak that language, while JavaScript communicates with the machine to instruct it to perform certain tasks.
Both languages can also be written to communicate ideas; a book written in Marathi would communicate a story to anyone that comes across
the book in the future, while code written in JavaScript would communicate ideas to future programmers who look at the program.

--------------------------------------------------------------------------------
What is different between the spoken language and the programming language? 
--------------------------------------------------------------------------------
One key difference is that there are far fewer words in JavaScript which have been given particular meaning by the language than
Marathi. A quick Google search shows that there are, at the very least, hundreds of thousands of unique words in Marathi; this means
that Marathi characters can be strung together into hundreds of thousands of different configurations, each of which is imbuded with a
specific meaning and understood by those listeing to the word. JavaScript, meanwhile, only has a small list (the words listed in the
keywords answer above) of words which have inherent meaning in the language; we see that the word "continue" would be recognized by the
language to have meaning, but the word "run" would not (and could only be defined using other surrounding operators or keywords), as it is
not a keyword. Beyond this, the primary audience of these two languages is different: while another person can generally find meaning in code,
a program is primary written to give instructions to a machine (this is why we need to document our code in a human language!), while a
spoken language is used to communicate ideas to another person.

--------------------------------------------------------------------------------
How might the similarities and differences affect someone's ability to learn the programming language?
--------------------------------------------------------------------------------
A person would likely intuitively understand how to format code because, just like a spoken language, programming languages are built from
characters in a set, which are strung together to create words with inherent and contextual meaning. However, a person may struggle to
understand code written by others, particularly when first learning a programming language; as described above, programming languages are less
human-friendly because they are, first and foremost, designed to effectively communicate with a machine. This is different from a spoken language,
which is often more human-intuitive because it was designed to be understood primarily by humans. A person may also struggle to communicate
complex ideas with the incredibly short list of keywords available in programming languages; oftentimes, because we have access to a far greater
array of words with inherent meaning in spoken languages, we're able to more easily describe complicated ideas. When programming, we must often
use workarounds, data structures, pre-defined algorithms, and so on to communicate complex ideas to the computer; we can't just rely on using
inherently understood words.

--------------------------------------------------------------------------------
Think back on your definition of "programming language" from class.   
--------------------------------------------------------------------------------
For reference, my definition of a programming language was that that a programming language is an interface through which a programmer 
can provide human-readable instructions to a computer to make it carry out specific tasks.

--------------------------------------------------------------------------------
Are HTML and CSS programming languages, according to your definition? Why or why not?
--------------------------------------------------------------------------------
Yes. In both cases, the programmer can input a series of commands (specifying, say, the colors and dimensions of a website graphic) using
specific keywords and syntax rules and then feed those commands into the computer. The computer processes those commands and, in the case
of our above example, outputs a graphic with the specified colors and dimensions. HTML and CSS allow us to interface with a machine, feed it
instructions, and make sure those instructions are obeyed, so both fall in line with the above definition.

--------------------------------------------------------------------------------
What do you think Yang and Rabkin would say about whether HTML and CSS are programming langauges?
--------------------------------------------------------------------------------
I believe Yang and Rabkin would say HTML and CSS are programming languages. Their article predominantly aims to push back against 
"language-based snobbery" and emphasize the value of everything that fits the basic definition of a programming language (which, as
described above, both HTML and CSS arguably do). They would likely point out that excluding HTML and CSS from programming language
discussions heightens elitism within the programming community and serves to dissuade and force out potentially talented programmers.

--------------------------------------------------------------------------------
Finally, what might be some consequences of TIOBE's decision not to include 
HTML and CSS on their list of programming languages?
--------------------------------------------------------------------------------
As described in Yang and Rabkin's article, drawing somewhat arbitrary boundaries around what languages are and are not considered "true"
programming languages further heightens heirarchical systems within computer science (i.e. programmers who code in C++ may use the exclusion
of these languages as a means of looking down on programmers who specialize in, say, HTML). This becomes more problematic when considering the
fact that web designers, likely the primary professional users of HTML and CSS, generally aren't paid as high or held in as much prestige as a
software engineer, who is more likely to use languages listed on TIOBE, so a stronger heirarchy also inadvertently heightens the perceived
superiority of these better paid positions. We could also see slower developments in web design than other applications of programming; less
respect and attention from the programming community naturally means that less developers will use these languages and less resources will
go into improving them, which may cause HTML and CSS-based programs to lag behind other language-based programs in terms of performance,
ease of use, width of applications, etc.
